#include "controlchartview.h"
#include "ui_controlchartview.h"

ControlChartView::ControlChartView(QWidget *parent) :
    QDialog(parent),
    ui(new Ui::ControlChartView)
{
    ui->setupUi(this);
    //另存为SVG
    connect(ui->pushButton,&QPushButton::clicked,[=]{
        QString filePath = QFileDialog::getSaveFileName(this, "Save SVG","", "SVG files (*.svg)");
        if (filePath == "")
            return;
        QSvgGenerator generator;
        generator.setFileName(filePath);
        generator.setSize(QSize(this->width(), this->height()));
        generator.setViewBox(QRect(0, 0, this->width(), this->height()));
        generator.setTitle("SVG");
        generator.setDescription("This SVG file is generated by Qt.");
        QPainter painter;
        painter.begin(&generator);
        this->render(&painter);
        painter.end();
    });
    //另存为png
    connect(ui->pushButton_2,&QPushButton::clicked,[=]{
        QString filePath = QFileDialog::getSaveFileName(this, "Save png","", "png files (*.png)");
        if (filePath == "")
            return;
        QPixmap p=this->grab();
        QImage image=p.toImage();
        image.save(filePath);
    });



}

void ControlChartView::addControlChartToLayout(control_chart cc,QString title){
    QLineSeries *series = new QLineSeries();
    for(uint32_t i=0;i<cc.length;i++){
        series->append(i+1,cc.data[i]);
    }
    //series->setColor(Qt::blue);
    series->setPointsVisible(true);
    series->setPointLabelsClipping(true);
    series->setPointLabelsVisible(true);
    series->setPointLabelsColor(Qt::gray);

    //计算Y轴最大显示范围: y_max= mean +4Sigma, y_min= mean -4Sigma;
    double y_max=0.0;
    double y_min=0.0;
    y_max=(cc.ucl-cc.ml)*4.0/3.0 +cc.ml;
    y_min=cc.ml-(cc.ml-cc.lcl)*4.0/3.0;

    QLineSeries *ucl_line=new QLineSeries();
    for(uint32_t i=0;i<cc.length;i++){
        ucl_line->append(i+1,cc.ucl);
    }
    ucl_line->setColor(Qt::red);

    QLineSeries *lcl_line=new QLineSeries();
    for(uint32_t i=0;i<cc.length;i++){
        lcl_line->append(i+1,cc.lcl);
    }
    lcl_line->setColor(Qt::red);

    QLineSeries *ml_line=new QLineSeries();
    for(uint32_t i=0;i<cc.length;i++){
        ml_line->append(i+1,cc.ml);
    }
    ml_line->setColor(Qt::darkGreen);

    QString lcl_lable=QString("LCL: ").append(QString::number(cc.lcl));
    QString ml_lable=QString("M: ").append(QString::number(cc.ml));
    QString ucl_lable=QString("UCL: ").append(QString::number(cc.ucl));

    //设定控制限的标签位置,使用QCategroyAxis 分类轴, 让分类标签处于值的位置,就完成了设置控制限的标签
    QCategoryAxis *Y_control_line = new QCategoryAxis;
    Y_control_line->setMin(y_min);
    Y_control_line->setMax(y_max);
    Y_control_line->setStartValue(y_min);
    Y_control_line->append(lcl_lable, cc.lcl);
    Y_control_line->append(ml_lable, cc.ml);
    Y_control_line->append(ucl_lable, cc.ucl);
    Y_control_line->setLabelsPosition(QCategoryAxis::AxisLabelsPositionOnValue);
    Y_control_line->setLabelsColor(Qt::darkRed);


   QValueAxis *axisX = new QValueAxis;
    axisX->setTickCount(10);
    axisX->setLabelFormat("%d");

   QChart *chart = new QChart();
   chart->legend()->hide();
   chart->addSeries(series);
   chart->addSeries(ucl_line);
   chart->addSeries(lcl_line);
   chart->addSeries(ml_line);
   chart->createDefaultAxes();

   chart->axisY()->setMax(y_max);
   chart->axisY()->setMin(y_min);
   chart->setAxisX(axisX,series);

   chart->addAxis(Y_control_line,Qt::AlignRight);


   chart->setTitle(title);
   chart->legend()->setVisible(false);

   QChartView *chartView = new QChartView();
   chartView->setChart(chart);
   chartView->setRenderHint(QPainter::Antialiasing);
   ui->verticalLayout->addWidget(chartView);


}


ControlChartView::~ControlChartView()
{
    delete ui;
}


