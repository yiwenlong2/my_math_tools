

pub fn d2(n: usize) -> f64 {
    if n < 2 {
        panic!("d2(n): n<2, too small!");
    } else if n > 50 && n<101{
       let target=3.4873+0.0250141*(n as f64)-0.00009823*((n*n) as f64);
       return target;
    }else if n>100 {
         panic!("d2(n): n>100, too large!");
    }


    let d2_data_vec = vec![
        1.128, 1.693, 2.059, 2.326, 2.534, 2.704, 2.847, 2.97, 3.078, 3.173, 3.258, 3.336, 3.407,
        3.472, 3.532, 3.588, 3.64, 3.689, 3.735, 3.778, 3.819, 3.858, 3.895, 3.931, 3.964, 3.997,
        4.027, 4.057, 4.086, 4.113, 4.139, 4.165, 4.189, 4.213, 4.236, 4.259, 4.28, 4.301, 4.322,
        4.341, 4.361, 4.379, 4.398, 4.415, 4.433, 4.45, 4.466, 4.482, 4.498,
    ];
    let d2_index: Vec<usize> = vec![
        2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
        27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
        50,
    ];
    //println!("{}",d2_data_vec.len());
    //println!("{}",d2_index.len());
    let mut index: usize = 0usize;
    for i in 0..d2_index.len() {
        if d2_index[i] == n {
            index = i;
        }
    }
    let target = d2_data_vec.get(index).unwrap();
    return *target;
}

pub fn d3(n: usize) -> f64 {
    if n < 2 {
        panic!("d3(n): n<2, too small!");
    } else if n>25 && n<101 {
        let target=0.80818-0.0051871*(n as f64)+0.00005098*((n*n)as f64)-0.00000019*((n*n*n)as f64);
        return target;
    }
    else if n > 100 {
        panic!("d3(n): n>100, too large!");
    }

    let d3_data_vec = vec![
        0.8525, 0.8884, 0.8798, 0.8641, 0.848, 0.8332, 0.8198, 0.8078, 0.7971, 0.7873, 0.7785,
        0.7704, 0.763, 0.7562, 0.7499, 0.7441, 0.7386, 0.7335, 0.7287, 0.7242, 0.7199, 0.7159,
        0.7121, 0.7084,
    ];
    let d3_index: Vec<usize> = vec![
        2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
    ];
    //println!("{}",d2_data_vec.len());
    //println!("{}",d2_index.len());
    let mut index: usize = 0usize;
    for i in 0..d3_index.len() {
        if d3_index[i] == n {
            index = i;
        }
    }
    let target = d3_data_vec.get(index).unwrap();
    return *target;
}

pub fn d4(n: usize) -> f64 {
    if n < 2 {
        panic!("d4(n): n<2, too small!");
    }  else if n>25 && n<101 {
        let target=2.88606+0.0051313*(n as f64)-0.00049243*((n*n)as f64)+0.00000188*((n*n*n)as f64);
        return target;
    }
    else if n > 100 {
        panic!("d4(n): n>100, too large!");
    }

    let d4_data_vec = vec![
        0.954, 1.588, 1.978, 2.257, 2.472, 2.645, 2.791, 2.915, 3.024, 3.121, 3.207, 3.285, 3.356,
        3.422, 3.482, 3.538, 3.591, 3.64, 3.686, 3.73, 3.771, 3.811, 3.847, 3.883,
    ];
    let d4_index: Vec<usize> = vec![
        2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
    ];
    //println!("{}",d2_data_vec.len());
    //println!("{}",d2_index.len());
    let mut index: usize = 0usize;
    for i in 0..d4_index.len() {
        if d4_index[i] == n {
            index = i;
        }
    }
    let target = d4_data_vec.get(index).unwrap();
    return *target;
}

pub fn c4_1(n: usize) -> f64 {
    let mut c4_index: Vec<usize> = Vec::new();
    for i in 2..=500 {
        c4_index.push(i);
    }
    let c4_1_data_vec = vec![
        0.79785, 0.87153, 0.905763, 0.925222, 0.937892, 0.946837, 0.953503, 0.958669, 0.962793,
        0.966163, 0.968968, 0.971341, 0.973375, 0.975137, 0.976679, 0.978039, 0.979249, 0.980331,
        0.981305, 0.982187, 0.982988, 0.98372, 0.984391, 0.985009, 0.985579, 0.986107, 0.986597,
        0.987054, 0.98748, 0.987878, 0.988252, 0.988603, 0.988934, 0.989246, 0.98954, 0.989819,
        0.990083, 0.990333, 0.990571, 0.990797, 0.991013, 0.991218, 0.991415, 0.991602, 0.991782,
        0.991953, 0.992118, 0.992276, 0.992427, 0.992573, 0.992713, 0.992848, 0.992978, 0.993103,
        0.993224, 0.99334, 0.993452, 0.993561, 0.993666, 0.993767, 0.993866, 0.993961, 0.994053,
        0.994142, 0.994229, 0.994313, 0.994395, 0.994474, 0.994551, 0.994626, 0.994699, 0.994769,
        0.994838, 0.994905, 0.99497, 0.995034, 0.995096, 0.995156, 0.995215, 0.995272, 0.995328,
        0.995383, 0.995436, 0.995489, 0.995539, 0.995589, 0.995638, 0.995685, 0.995732, 0.995777,
        0.995822, 0.995865, 0.995908, 0.995949, 0.99599, 0.99603, 0.996069, 0.996108, 0.996145,
        0.996182, 0.996218, 0.996253, 0.996288, 0.996322, 0.996356, 0.996389, 0.996421, 0.996452,
        0.996483, 0.996514, 0.996544, 0.996573, 0.996602, 0.996631, 0.996658, 0.996686, 0.996713,
        0.996739, 0.996765, 0.996791, 0.996816, 0.996841, 0.996865, 0.996889, 0.996913, 0.996936,
        0.996959, 0.996982, 0.997004, 0.997026, 0.997047, 0.997069, 0.997089, 0.99711, 0.99713,
        0.99715, 0.99717, 0.997189, 0.997209, 0.997227, 0.997246, 0.997264, 0.997282, 0.9973,
        0.997318, 0.997335, 0.997352, 0.997369, 0.997386, 0.997402, 0.997419, 0.997435, 0.99745,
        0.997466, 0.997481, 0.997497, 0.997512, 0.997526, 0.997541, 0.997555, 0.99757, 0.997584,
        0.997598, 0.997612, 0.997625, 0.997639, 0.997652, 0.997665, 0.997678, 0.997691, 0.997703,
        0.997716, 0.997728, 0.997741, 0.997753, 0.997765, 0.997776, 0.997788, 0.9978, 0.997811,
        0.997822, 0.997834, 0.997845, 0.997856, 0.997866, 0.997877, 0.997888, 0.997898, 0.997909,
        0.997919, 0.997929, 0.997939, 0.997949, 0.997959, 0.997969, 0.997978, 0.997988, 0.997997,
        0.998007, 0.998016, 0.998025, 0.998034, 0.998043, 0.998052, 0.998061, 0.99807, 0.998078,
        0.998087, 0.998095, 0.998104, 0.998112, 0.99812, 0.998128, 0.998137, 0.998145, 0.998152,
        0.99816, 0.998168, 0.998176, 0.998184, 0.998191, 0.998199, 0.998206, 0.998214, 0.998221,
        0.998228, 0.998235, 0.998242, 0.99825, 0.998257, 0.998263, 0.99827, 0.998277, 0.998284,
        0.998291, 0.998297, 0.998304, 0.998311, 0.998317, 0.998323, 0.99833, 0.998336, 0.998342,
        0.998349, 0.998355, 0.998361, 0.998367, 0.998373, 0.998379, 0.998385, 0.998391, 0.998397,
        0.998403, 0.998408, 0.998414, 0.99842, 0.998425, 0.998431, 0.998436, 0.998442, 0.998447,
        0.998453, 0.998458, 0.998463, 0.998469, 0.998474, 0.998479, 0.998484, 0.998489, 0.998495,
        0.9985, 0.998505, 0.99851, 0.998515, 0.998519, 0.998524, 0.998529, 0.998534, 0.998539,
        0.998544, 0.998548, 0.998553, 0.998558, 0.998562, 0.998567, 0.998571, 0.998576, 0.99858,
        0.998585, 0.998589, 0.998593, 0.998598, 0.998602, 0.998606, 0.998611, 0.998615, 0.998619,
        0.998623, 0.998627, 0.998632, 0.998636, 0.99864, 0.998644, 0.998648, 0.998652, 0.998656,
        0.99866, 0.998664, 0.998668, 0.998671, 0.998675, 0.998679, 0.998683, 0.998687, 0.99869,
        0.998694, 0.998698, 0.998701, 0.998705, 0.998709, 0.998712, 0.998716, 0.99872, 0.998723,
        0.998727, 0.99873, 0.998734, 0.998737, 0.99874, 0.998744, 0.998747, 0.998751, 0.998754,
        0.998757, 0.998761, 0.998764, 0.998767, 0.99877, 0.998774, 0.998777, 0.99878, 0.998783,
        0.998786, 0.99879, 0.998793, 0.998796, 0.998799, 0.998802, 0.998805, 0.998808, 0.998811,
        0.998814, 0.998817, 0.99882, 0.998823, 0.998826, 0.998829, 0.998832, 0.998835, 0.998837,
        0.99884, 0.998843, 0.998846, 0.998849, 0.998851, 0.998854, 0.998857, 0.99886, 0.998862,
        0.998865, 0.998868, 0.998871, 0.998873, 0.998876, 0.998879, 0.998881, 0.998884, 0.998886,
        0.998889, 0.998892, 0.998894, 0.998897, 0.998899, 0.998902, 0.998904, 0.998907, 0.998909,
        0.998912, 0.998914, 0.998917, 0.998919, 0.998921, 0.998924, 0.998926, 0.998929, 0.998931,
        0.998933, 0.998936, 0.998938, 0.99894, 0.998943, 0.998945, 0.998947, 0.99895, 0.998952,
        0.998954, 0.998956, 0.998959, 0.998961, 0.998963, 0.998965, 0.998967, 0.99897, 0.998972,
        0.998974, 0.998976, 0.998978, 0.99898, 0.998982, 0.998985, 0.998987, 0.998989, 0.998991,
        0.998993, 0.998995, 0.998997, 0.998999, 0.999001, 0.999003, 0.999005, 0.999007, 0.999009,
        0.999011, 0.999013, 0.999015, 0.999017, 0.999019, 0.999021, 0.999023, 0.999025, 0.999027,
        0.999028, 0.99903, 0.999032, 0.999034, 0.999036, 0.999038, 0.99904, 0.999042, 0.999043,
        0.999045, 0.999047, 0.999049, 0.999051, 0.999052, 0.999054, 0.999056, 0.999058, 0.99906,
        0.999061, 0.999063, 0.999065, 0.999067, 0.999068, 0.99907, 0.999072, 0.999073, 0.999075,
        0.999077, 0.999078, 0.99908, 0.999082, 0.999084, 0.999085, 0.999087, 0.999088, 0.99909,
        0.999092, 0.999093, 0.999095, 0.999097, 0.999098, 0.9991, 0.999101, 0.999103, 0.999104,
        0.999106, 0.999108, 0.999109, 0.999111, 0.999112, 0.999114, 0.999115, 0.999117, 0.999118,
        0.99912, 0.999121, 0.999123, 0.999124,
    ];
    if n < 2 {
        panic!("c4_1(n): n<2, too small!");
    } else if n > 500 {
        panic!("c4_1(n): n>500, too large!");
    }
    let mut index: usize = 0usize;
    for i in 0..c4_index.len() {
        if c4_index[i] == n {
            index = i;
        }
    }
    let target = c4_1_data_vec.get(index).unwrap();
    return *target;

}

pub fn c4(n:usize) ->f64 {
    use mathru::special::gamma::gamma;
    let _n=n as f64;
    let x = gamma( _n/ 2.0);
    let y = gamma((_n - 1.0) / 2.0);
    let z = (2.0 / (_n - 1.0)).sqrt();
    let c4 = z * (x / y);

    return c4;
}

pub fn c5(n: usize) ->f64{
    let c4=c4(n);
    let c5=(1.0-c4*c4).sqrt();

    return c5;
}